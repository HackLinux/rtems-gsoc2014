OUTPUT_ARCH (or1k)

ENTRY (_start)

/*
 * Global symbols that may be defined externally
 */

bsp_vector_table_size = DEFINED (bsp_vector_table_size) ? bsp_vector_table_size : 8192;

bsp_section_xbarrier_align  = DEFINED (bsp_section_xbarrier_align) ? bsp_section_xbarrier_align : 1;
bsp_section_robarrier_align = DEFINED (bsp_section_robarrier_align) ? bsp_section_robarrier_align : 1;
bsp_section_rwbarrier_align = DEFINED (bsp_section_rwbarrier_align) ? bsp_section_rwbarrier_align : 1;

bsp_stack_align = DEFINED (bsp_stack_align) ? bsp_stack_align : 8;

bsp_stack_main_size = DEFINED (bsp_stack_main_size) ? bsp_stack_main_size : 0;
bsp_stack_main_size = ALIGN (bsp_stack_main_size, bsp_stack_align);

bsp_processor_count = DEFINED (bsp_processor_count) ? bsp_processor_count : 1;

MEMORY
  {
      VECTOR_RAM     (AIW) : ORIGIN = 0x0       , LENGTH = 8192 
      RAM   : org = 0x00002000, l = 0x00800000
      UNEXPECTED_SECTIONS : ORIGIN = 0xffffffff, LENGTH = 0
  }

REGION_ALIAS ("REGION_START", RAM);
REGION_ALIAS ("REGION_VECTOR", VECTOR_RAM);
REGION_ALIAS ("REGION_TEXT", RAM);
REGION_ALIAS ("REGION_TEXT_LOAD", RAM);
REGION_ALIAS ("REGION_RODATA", RAM);
REGION_ALIAS ("REGION_RODATA_LOAD", RAM);
REGION_ALIAS ("REGION_DATA", RAM);
REGION_ALIAS ("REGION_DATA_LOAD", RAM);
REGION_ALIAS ("REGION_FAST_DATA", RAM);
REGION_ALIAS ("REGION_FAST_DATA_LOAD", RAM);
REGION_ALIAS ("REGION_BSS", RAM);
REGION_ALIAS ("REGION_WORK", RAM);
REGION_ALIAS ("REGION_STACK", RAM);


    bsp_section_vector_begin = 0;

SECTIONS {

  .vector : ALIGN_WITH_INPUT {
    *(.vector)
    . = ALIGN(bsp_vector_table_size);
    bsp_section_vector_end = .;
  } > REGION_VECTOR AT > REGION_VECTOR
  bsp_section_vector_size = bsp_section_vector_end - bsp_section_vector_begin;
  bsp_vector_table_begin = bsp_section_vector_begin;
  bsp_vector_table_end = bsp_vector_table_begin + bsp_vector_table_size;

  .start : ALIGN_WITH_INPUT {
    bsp_section_start_begin = .;
    KEEP (*(.bsp_start_text))
    KEEP (*(.bsp_start_data))
    bsp_section_start_end = .;
  } > REGION_START AT > REGION_START
  bsp_section_start_size = bsp_section_start_end - bsp_section_start_begin;

  .xbarrier : ALIGN_WITH_INPUT {
    . = ALIGN (bsp_section_xbarrier_align);
  } > REGION_VECTOR AT > REGION_VECTOR
  bsp_section_start_size = bsp_section_start_end - bsp_section_start_begin;

.xbarrier : ALIGN_WITH_INPUT {
    . = ALIGN (bsp_section_xbarrier_align);
  } > REGION_VECTOR AT > REGION_VECTOR

.text : ALIGN_WITH_INPUT {
    bsp_section_text_begin = .;
    *(.text.unlikely .text.*_unlikely)
    *(.text .stub .text.* .gnu.linkonce.t.*)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
    *(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx)
  } > REGION_TEXT AT > REGION_TEXT_LOAD
  .init : ALIGN_WITH_INPUT {
    KEEP (*(.init))
  } > REGION_TEXT AT > REGION_TEXT_LOAD
  .fini : ALIGN_WITH_INPUT {
    KEEP (*(.fini))
    bsp_section_text_end = .;
  } > REGION_TEXT AT > REGION_TEXT_LOAD
  bsp_section_text_size = bsp_section_text_end - bsp_section_text_begin;
  bsp_section_text_load_begin = LOADADDR (.text);
  bsp_section_text_load_end = bsp_section_text_load_begin + bsp_section_text_size;

.robarrier : ALIGN_WITH_INPUT {
    . = ALIGN (bsp_section_robarrier_align);
  } > REGION_RODATA AT > REGION_RODATA

.rodata : ALIGN_WITH_INPUT {
    bsp_section_rodata_begin = .;
    *(.rodata .rodata.* .gnu.linkonce.r.*)
    bsp_section_rodata_end = .;
  } > REGION_RODATA AT > REGION_RODATA_LOAD

  bsp_section_rodata_size = bsp_section_rodata_end - bsp_section_rodata_begin;
  bsp_section_rodata_load_begin = LOADADDR (.rodata);
  bsp_section_rodata_load_end = bsp_section_rodata_load_begin + bsp_section_rodata_size;

.rwbarrier : ALIGN_WITH_INPUT {
    . = ALIGN (bsp_section_rwbarrier_align);
  } > REGION_DATA AT > REGION_DATA

.data : ALIGN_WITH_INPUT {
    bsp_section_data_begin = .;
    *(.data .data.* .gnu.linkonce.d.*)
    SORT(CONSTRUCTORS)
  } > REGION_DATA AT > REGION_DATA_LOAD
  .data1 : ALIGN_WITH_INPUT {
    *(.data1)
  } > REGION_DATA AT > REGION_DATA_LOAD
  .rtemsrwset : ALIGN_WITH_INPUT {
    KEEP (*(SORT(.rtemsrwset.*)))
    bsp_section_data_end = .;
  } > REGION_DATA AT > REGION_DATA_LOAD
  bsp_section_data_size = bsp_section_data_end - bsp_section_data_begin;
  bsp_section_data_load_begin = LOADADDR (.data);
  bsp_section_data_load_end = bsp_section_data_load_begin + bsp_section_data_size;

  .bss : ALIGN_WITH_INPUT {
    bsp_section_bss_begin = .;
    *(.dynbss)
    *(.bss .bss.* .gnu.linkonce.b.*)
    *(COMMON)
    bsp_section_bss_end = .;
  } > REGION_BSS AT > REGION_BSS
  bsp_section_bss_size = bsp_section_bss_end - bsp_section_bss_begin;

.work : ALIGN_WITH_INPUT {
    /*
     * The work section will occupy the remaining REGION_WORK region and
     * contains the RTEMS work space and heap.
     */
    bsp_section_work_begin = .;
    . += ORIGIN (REGION_WORK) + LENGTH (REGION_WORK) - ABSOLUTE (.);
    bsp_section_work_end = .;
  } > REGION_WORK AT > REGION_WORK
  bsp_section_work_size = bsp_section_work_end - bsp_section_work_begin;

  .stack : ALIGN_WITH_INPUT {
    bsp_section_stack_end = .;
  } > REGION_STACK AT > REGION_STACK
  bsp_section_stack_begin = 0x00802000;
  bsp_section_stack_size = bsp_section_stack_begin - bsp_section_stack_end;

  /* FIXME */
  RamBase = ORIGIN (REGION_WORK);
  RamSize = LENGTH (REGION_WORK);
  WorkAreaBase = bsp_section_work_begin;
  HeapSize = 0;

}
